<?xml version="1.0" encoding="UTF-8"?>
<title>Template Pattern</title>
<note>
	<intent>
		<para>Define an interface for creating an object, but let subclasses
			(concrete class that implements it) decide which class to
			instantiate. Factory Method lets a class defer instantiation to
			subclasses.s
		</para>
	</intent>
	<motivation>
		<para>a. Sometimes an object may only know that it needs an object of
			a certain type but does not know exactly which one from the set of
			subclasses of the parent class is to be selected.

			b. The choice of an
			appropriate class may depend on factors such as: –
			The state of the
			running application. – Application configuration
			settings. – Expansion
			of requirements or enhancements.

			c. Factory Method recommends
			encapsulating the functionality required,
			to select and instantiate an
			appropriate class, inside a designated
			method referred to as a factory
			method.

			d. A factory method can be defined as a method in a class
			that: –
			Selects an appropriate class from a class hierarchy based on
			the
			application context and other influencing factors.
			– Instantiates
			the selected class and returns it as an instance of the
			parent class
			type.s
		</para>
	</motivation>
	<applicability>
		<para>Use the Factory Method pattern when a. A class can't anticipate
			the class of objects it must create. b. A class wants its subclasses
			to specify the objects it creates. c. Classes delegate responsibility
			to one of several helper subclasses, and you want to localize the
			knowledge of which helper subclass is the delegate.
		</para>

	</applicability>
</note>
